//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/PlatformControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlatformControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlatformControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlatformControl"",
    ""maps"": [
        {
            ""name"": ""Platform"",
            ""id"": ""72b09c1c-d12d-48e3-ad46-01061301ecc1"",
            ""actions"": [
                {
                    ""name"": ""Rotate Y"",
                    ""type"": ""Button"",
                    ""id"": ""fed29028-6895-43eb-9a95-1c5713de1e2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate X"",
                    ""type"": ""Button"",
                    ""id"": ""daf20c17-992f-4a57-a163-8ebf312e40bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""61179a68-7ea5-4ca2-8afd-4cc2c13afe35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4eabc38b-23cd-4ebc-bee3-c846dfb87af9"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1bdfb91-795d-41af-b3d4-c33442073147"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83adfbec-37fb-42ae-a6d8-dda39c2ef9a1"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Platform
        m_Platform = asset.FindActionMap("Platform", throwIfNotFound: true);
        m_Platform_RotateY = m_Platform.FindAction("Rotate Y", throwIfNotFound: true);
        m_Platform_RotateX = m_Platform.FindAction("Rotate X", throwIfNotFound: true);
        m_Platform_Move = m_Platform.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Platform
    private readonly InputActionMap m_Platform;
    private IPlatformActions m_PlatformActionsCallbackInterface;
    private readonly InputAction m_Platform_RotateY;
    private readonly InputAction m_Platform_RotateX;
    private readonly InputAction m_Platform_Move;
    public struct PlatformActions
    {
        private @PlatformControl m_Wrapper;
        public PlatformActions(@PlatformControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateY => m_Wrapper.m_Platform_RotateY;
        public InputAction @RotateX => m_Wrapper.m_Platform_RotateX;
        public InputAction @Move => m_Wrapper.m_Platform_Move;
        public InputActionMap Get() { return m_Wrapper.m_Platform; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformActions set) { return set.Get(); }
        public void SetCallbacks(IPlatformActions instance)
        {
            if (m_Wrapper.m_PlatformActionsCallbackInterface != null)
            {
                @RotateY.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateY;
                @RotateY.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateY;
                @RotateY.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateY;
                @RotateX.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateX;
                @RotateX.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateX;
                @RotateX.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnRotateX;
                @Move.started -= m_Wrapper.m_PlatformActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlatformActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlatformActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PlatformActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateY.started += instance.OnRotateY;
                @RotateY.performed += instance.OnRotateY;
                @RotateY.canceled += instance.OnRotateY;
                @RotateX.started += instance.OnRotateX;
                @RotateX.performed += instance.OnRotateX;
                @RotateX.canceled += instance.OnRotateX;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PlatformActions @Platform => new PlatformActions(this);
    public interface IPlatformActions
    {
        void OnRotateY(InputAction.CallbackContext context);
        void OnRotateX(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
